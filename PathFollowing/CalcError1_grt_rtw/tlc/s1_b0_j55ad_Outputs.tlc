%implements s1_b0_j55ad_Outputs "C"

%function Outputs(block, system) Output
%assign cfgTxt = ""
%openfile cfgTxt
%assign localVarDecl = ""
%openfile localVarDecl

real_T rtb_Add1;
real_T rtb_Add2;
real_T X_err_tmp;
real_T X_err_tmp_0;
%closefile localVarDecl
%<SLibCG_TrackEO(3)>\
%<SLibCG_TrackEO(2)>\
%<SLibCG_TrackEO(1)>\
%<SLibCG_TrackEO(0)>\
%<SLibCG_TrackEI(5)>\
%<SLibCG_TrackEI(4)>\
%<SLibCG_TrackEI(3)>\
%<SLibCG_TrackEI(2)>\
%<SLibCG_TrackEI(1)>\
%<SLibCG_TrackEI(0)>\
/* Outputs for Atomic SubSystem: '<Root>/CalcError1' */
/* Sum: '<S1>/Add1' incorporates:
 *  Inport: '<Root>/y_cur'
 *  Inport: '<Root>/y_ref'
 */
rtb_Add1 = CalcError1_U.Y_r - CalcError1_U.Y_c;
/* Sum: '<S1>/Add2' incorporates:
 *  Inport: '<Root>/x_cur'
 *  Inport: '<Root>/x_ref'
 */
rtb_Add2 = CalcError1_U.X_r - CalcError1_U.X_c;
/* Trigonometry: '<S1>/Trigonometric Function1' incorporates:
 *  Inport: '<Root>/É∆_cur'
 *  Trigonometry: '<S1>/Trigonometric Function2'
 */
X_err_tmp = std::sin(CalcError1_U.Th_c);
/* Trigonometry: '<S1>/Trigonometric Function4' incorporates:
 *  Inport: '<Root>/É∆_cur'
 *  Trigonometry: '<S1>/Trigonometric Function3'
 */
X_err_tmp_0 = std::cos(CalcError1_U.Th_c);
/* Outport: '<Root>/X_err' incorporates:
 *  Product: '<S1>/Product'
 *  Product: '<S1>/Product1'
 *  Sum: '<S1>/Add4'
 *  Trigonometry: '<S1>/Trigonometric Function1'
 *  Trigonometry: '<S1>/Trigonometric Function4'
 */
CalcError1_Y.X_err = rtb_Add2 * X_err_tmp_0 + rtb_Add1 * X_err_tmp;
/* Outport: '<Root>/Y_err' incorporates:
 *  Gain: '<S1>/Gain4'
 *  Product: '<S1>/Product2'
 *  Product: '<S1>/Product3'
 *  Sum: '<S1>/Add5'
 */
CalcError1_Y.Y_err = rtb_Add2 * -X_err_tmp + rtb_Add1 * X_err_tmp_0;
/* Outport: '<Root>/Th_err' incorporates:
 *  Inport: '<Root>/É∆_cur'
 *  Inport: '<Root>/É∆_ref'
 *  Sum: '<S1>/Add3'
 */
CalcError1_Y.Th_err = CalcError1_U.Th_r - CalcError1_U.Th_c;
/* End of Outputs for SubSystem: '<Root>/CalcError1' */

/* Outport: '<Root>/Th_cur' incorporates:
 *  Inport: '<Root>/É∆_cur'
 */
CalcError1_Y.Th_cur = CalcError1_U.Th_c;
%<SLibInsertSolverResetCode()>\
%closefile cfgTxt
%<cfgTxt>
%<LibSetSystemField(system, "CachedOutputLocalVars", localVarDecl)>
%endfunction
%function OutputsFcnProtoType(block, system) Output
%assign fcnProtoType = ""
%openfile fcnProtoType
static void Outputs(\
%assign comma = ""
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(0, 1, fcnProtoType)>
%endfunction
